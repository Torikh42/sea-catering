// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

enum SubscriptionStatus {
  active
  paused
  cancelled
  completed 
}

model User {
  id            String          @id @default(uuid())
  fullName      String
  email         String          @unique
  role          Role            @default(user)
  createdAt     DateTime        @default(now())
  subscriptions Subscription[]
  password      String?
  testimonials  Testimonial[] 
}

model Subscription {
  id                  String               @id @default(uuid())
  user                User                 @relation(fields: [userId], references: [id])
  userId              String
  fullName            String
  mealPlan            MealPlan             @relation(fields: [mealPlanId], references: [id])
  mealPlanId          String
  phone               String
  allergies           String?
  totalPrice          Decimal              @db.Decimal(10, 2)
  status              SubscriptionStatus   @default(active)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  mealTypes           SubscriptionMealType[]
  deliveryDays        SubscriptionDeliveryDay[]

  pausedStartDate     DateTime? 
  pausedEndDate       DateTime? 
  cancelledAt         DateTime? 
  reactivatedAt       DateTime? 

  @@index([status])
  @@index([createdAt])
  @@index([cancelledAt])
  @@index([reactivatedAt])
}

model MealPlan {
  id          String         @id @default(uuid())
  name        String
  price       Int
  description String
  imageUrl    String?
  subscriptions Subscription[]
}

model MealType {
  id          String               @id @default(uuid())
  name        String               @unique
  subscriptions SubscriptionMealType[]
}

model DeliveryDay {
  id          String                  @id @default(uuid())
  name        String                  @unique
  subscriptions SubscriptionDeliveryDay[]
}

model SubscriptionMealType {
  id             String       @id @default(uuid())
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId String
  mealType       MealType     @relation(fields: [mealTypeId], references: [id])
  mealTypeId     String

  @@unique([subscriptionId, mealTypeId]) 
}

model SubscriptionDeliveryDay {
  id             String        @id @default(uuid())
  subscription   Subscription  @relation(fields: [subscriptionId], references: [id])
  subscriptionId String
  deliveryDay    DeliveryDay   @relation(fields: [deliveryDayId], references: [id])
  deliveryDayId  String

  @@unique([subscriptionId, deliveryDayId]) 
}

model Testimonial {
  id          String   @id @default(uuid())
  name        String
  message     String
  rating      Int
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
  userId      String   
}